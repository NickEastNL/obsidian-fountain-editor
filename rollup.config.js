import commonjs from "@rollup/plugin-commonjs";
import { nodeResolve } from "@rollup/plugin-node-resolve";
import typescript from "@rollup/plugin-typescript";
import copy from "rollup-plugin-copy";

const TEST_VAULT_PLUGIN_DIR =
	"obsidian-fountain-editor-test/.obsidian/plugins/fountain-editor";

/* ------------------------------------ - ----------------------------------- */

const isProduction = process.env.BUILD === "production";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source, visit the plugin's github repository
*/
`;

const getPlugins = (...plugins) =>
	[
		typescript({
			sourceMap: !isProduction,
			inlineSources: !isProduction,
			rootDir: "./src",
		}),
		nodeResolve(),
		commonjs(),
	].concat(plugins);

const BASE_CONFIG = {
	input: "src/main.ts",
	external: ["obsidian", "@codemirror/view", "@codemirror/state"],
};

const DEV_PLUGIN_CONFIG = {
	...BASE_CONFIG,
	output: {
		dir: TEST_VAULT_PLUGIN_DIR,
		sourcemap: "inline",
		format: "cjs",
		exports: "default",
	},
	plugins: getPlugins(
		copy({
			targets: [
				{ src: "manifest.json", dest: TEST_VAULT_PLUGIN_DIR },
				{ src: "styles.css", dest: TEST_VAULT_PLUGIN_DIR },
			],
			hook: "writeBundle",
			verbose: true,
			overwrite: true,
		}),
	),
};

const PROD_PLUGIN_CONFIG = {
	...BASE_CONFIG,
	output: {
		dir: ".",
		sourcemap: "inline",
		sourcemapExcludeSources: true,
		format: "cjs",
		exports: "default",
		banner,
	},
	plugins: getPlugins(),
};

const config = isProduction ? PROD_PLUGIN_CONFIG : DEV_PLUGIN_CONFIG;

export default config;
